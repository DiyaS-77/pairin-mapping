from PyQt6.QtWidgets import QMessageBox, QInputDialog
from constants import pairing_request_map


def handle_pairing_request(self, request_type, device_path, uuid=None, passkey=None):
    self.log.info(f"Handling pairing request: {request_type} for {device_path}")
    device_address = device_path.split("dev_")[-1].replace("_", ":")

    # Auto-handle NoInputNoOutput devices
    if (
        self.selected_capability == "NoInputNoOutput"
        and self.bluetooth_device_manager.is_device_paired(device_address)
    ):
        self.add_paired_device_to_list(device_address)
        return

    pairing_config = pairing_request_map.get(request_type)
    if not pairing_config:
        self.log.warning(f"Unknown pairing request type: {request_type}")
        return

    title = pairing_config["title"]
    message = pairing_config["message"].format(device_address=device_address, uuid=uuid, passkey=passkey)
    interaction_type = pairing_config["type"]
    post_action_key = pairing_config.get("post_action")

    # --- UI interaction map (only here, not in constants) ---
    user_interaction_map = {
        "input_text": lambda: QInputDialog.getText(self, title, message),
        "input_int": lambda: QInputDialog.getInt(self, title, message),
        "confirm": lambda: QMessageBox.question(
            self, title, message, QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
        ),
        "authorize": lambda: QMessageBox.question(
            self, title, message, QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
        ),
        "display": lambda: QMessageBox.information(self, title, message),
        "cancel": lambda: QMessageBox.warning(self, title, message),
    }

    # --- Post-action map (still belongs here since it acts on UI) ---
    post_action_map = {
        "add_paired_device": lambda: self.add_paired_device_to_list(device_address),
        "add_connected_device": lambda: self.add_connected_device_to_list(device_address),
    }

    # --- Response handler map ---
    response_handler_map = {
        "input_text": lambda result: (
            post_action_map[post_action_key]() if result[1] and result[0] else
            QMessageBox.warning(self, "Cancelled", f"PIN entry cancelled for {device_address}.")
        ),
        "input_int": lambda result: (
            QMessageBox.information(self, "Pairing Successful", f"{device_address} paired successfully.")
            or post_action_map[post_action_key]()
            if result[1]
            else QMessageBox.warning(self, "Cancelled", f"Passkey entry cancelled for {device_address}.")
        ),
        "confirm": lambda result: (
            QMessageBox.information(self, "Pairing Successful", f"{device_address} was paired.")
            or post_action_map[post_action_key]()
            if result == QMessageBox.StandardButton.Yes
            else QMessageBox.information(self, "Pairing Failed", f"Pairing failed for {device_address}.")
        ),
        "authorize": lambda result: (
            QMessageBox.information(self, "Connection Successful", f"{device_address} connected successfully.")
            or post_action_map[post_action_key]()
            if result == QMessageBox.StandardButton.Yes
            else QMessageBox.warning(self, "Connection Denied", f"Connection denied for {device_address}.")
        ),
        "display": lambda _: (
            post_action_map.get(post_action_key, lambda: None)()
        ),
        "cancel": lambda _: (
            QMessageBox.warning(self, "Cancelled", f"Pairing with {device_address} was cancelled.")
        ),
    }

    # --- Run interaction ---
    result = user_interaction_map[interaction_type]()
    handler = response_handler_map[interaction_type]
    handler(result)